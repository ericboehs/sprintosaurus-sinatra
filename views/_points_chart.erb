<div class="relative h-[350px]">
  <canvas id="sprintPointsChart"></canvas>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var today = new Date().setHours(0, 0, 0, 0);
    var labels = <%= (sprint.start_date.to_date..sprint.end_date.to_date).map { |date| date.strftime("%a %-d") }.to_json %>;
    var isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    var labelColor = isDarkMode ? 'white' : 'black';

    var ctxPoints = document.getElementById('sprintPointsChart').getContext('2d');
    var remainingPointsData = <%= (sprint.start_date.to_date..sprint.end_date.to_date).map { |date| sprint.issues.where("closed_at IS NULL OR closed_at > ?", date.end_of_day).sum(:points) }.to_json %>;

    var closedIssuesByDay = {};
    var issuePointsByDay = {};
    <% closed_issues.each do |issue| %>
      var closedDate = new Date("<%= issue.closed_at.to_date.strftime('%Y-%m-%d') %>T00:00:00");
      var formattedDate = closedDate.toISOString().split('T')[0];
      if (!closedIssuesByDay[formattedDate]) {
        closedIssuesByDay[formattedDate] = [];
        issuePointsByDay[formattedDate] = 0;
      }
      closedIssuesByDay[formattedDate].push("#<%= issue.number %> <%= issue.title.gsub('"', '\\"') %> (<%= issue.points %> points)");
      issuePointsByDay[formattedDate] += <%= issue.points || 0 %>;
    <% end %>

    var filteredRemainingPointsData = remainingPointsData.filter((_, index) => {
      var date = new Date("<%= sprint.start_date.to_date.strftime('%Y-%m-%d') %>T00:00:00");
      date.setDate(date.getDate() + index);
      return date <= today;
    });

    var sprintPointsChart = new Chart(ctxPoints, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Remaining Points',
            data: filteredRemainingPointsData,
            borderColor: '#4d7c0f',
            fill: true,
            backgroundColor: 'rgba(26, 255, 5, 0.1)'
          },
          {
            label: 'Ideal Points',
            data: (function() {
              var totalPoints = <%= sprint.points %>;
              var startDate = new Date("<%= sprint.start_date.to_date.strftime('%Y-%m-%d') %>T00:00:00");
              var endDate = new Date("<%= sprint.end_date.to_date.strftime('%Y-%m-%d') %>T00:00:00");
              var workingDays = 0;
              for (var d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                var dayOfWeek = d.getDay();
                if (dayOfWeek !== 0 && dayOfWeek !== 6) workingDays++;
              }
              var pointsPerDay = totalPoints / workingDays;
              return labels.map((_, index) => {
                var date = new Date(startDate);
                date.setDate(date.getDate() + index);
                var dayOfWeek = date.getDay();
                if (dayOfWeek !== 0 && dayOfWeek !== 6) totalPoints -= pointsPerDay;
                return Math.max(totalPoints, 0);
              });
            })(),
            borderColor: 'gray',
            borderDash: [5, 5],
            fill: false
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: { ticks: { color: labelColor } },
          y: {
            title: { display: true, text: 'Points', color: labelColor },
            ticks: { color: labelColor }
          }
        },
        plugins: {
          tooltip: {
            callbacks: {
              afterBody: function(context) {
                if (context[0].datasetIndex === 0) {
                  var date = new Date("<%= sprint.start_date.to_date.strftime('%Y-%m-%d') %>T00:00:00");
                  date.setDate(date.getDate() + context[0].dataIndex);
                  var formattedDate = date.toISOString().split('T')[0];
                  var closedIssues = closedIssuesByDay[formattedDate] || [];
                  var pointsClosed = issuePointsByDay[formattedDate] || 0;
                  var tooltipText = '';
                  if (closedIssues.length > 0) {
                    tooltipText += '\nClosed issues:\n' + closedIssues.join('\n');
                  }
                  if (pointsClosed > 0) {
                    tooltipText += '\nPoints closed: ' + pointsClosed;
                  }
                  return tooltipText;
                }
                return ''; // Return empty string for "Ideal Points" dataset
              }
            }
          },
          legend: {
            display: true,
            position: 'top'
          }
        }
      }
    });
  });
</script>
